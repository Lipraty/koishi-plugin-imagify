import { Context, Schema, h, version } from 'koishi'
import { } from 'koishi-plugin-puppeteer'
import { pathToFileURL } from 'url'

const { version: pv } = require('../package.json')

export const name = 'imagify'

export interface Config {
  maxLineCount: number
  maxLength: number
  background: string
  blur: number
}

export const Config: Schema<Config> = Schema.object({
  maxLineCount: Schema.number().min(1).default(20).description('当文本行数超过该值时转为图片'),
  maxLength: Schema.number().min(1).default(600).description('当返回的文本字数超过该值时转为图片'),
  background: Schema.string().role('link').description('背景图片地址，以 http(s):// 开头'),
  blur: Schema.number().min(1).max(10).default(3).description('文本卡片模糊程度')
})

export const using = ['puppeteer']

const renderElements = [
  'p', 'a', 'br',
  'b', 'strong',
  'i', 'em',
  'u', 'ins',
  's', 'del']
const appendElements = ['at', 'button', 'execute', 'quote']
const specialElements = ['image', 'text']

export function apply(ctx: Context, config: Config) {
  const htmlStyle = {
    'font-size': '1.3rem',
    padding: '2rem',
    'background': `${config.background ? `url(${config.background})` : '#fff'}`,
    'background-size': 'contain',
    'background-repeat': 'no-repeat',
  }
  const cardStyle = {
    padding: '24px 12px',
    background: 'rgba(255, 255, 255, 0.6)',
    'border-radius': '15px',
    'backdrop-filter': `blur(${config.blur}px)`,
    'box-shadow': '0px 0px 15px rgba(0, 0, 0, 0.3)',
  }
  const pStyle = {
    'font-size': '1.3rem',
    'line-height': '1.6rem',
    'margin-bottom': '1rem',
    'text-align': 'justify',
    'text-justify': 'inter-ideograph'
  }
  const footerStyle = {
    'font-size': '0.85rem',
    background: '#333333',
    color: '#ffffff',
    padding: '18px',
    margin: '1rem -2rem -2rem -2rem'
  }
  ctx.before('send', async (session) => {
    if (h('', session.elements).toString(true).length > config.maxLength || session.elements.filter(e => ['p', 'a', 'button'].includes(e.type)).length > config.maxLineCount) {
      const elements = paser(session.elements)
      const image = await ctx.puppeteer.render(`
<html>
<head><meta charset="utf-8"></head>
<body style="${Object.entries(htmlStyle).map(([key, value]) => `${key}:${value}`).join(';')}">
<div style="${Object.entries(cardStyle).map(([key, value]) => `${key}:${value}`).join(';')}">
${elements.map(element => `<${element.type} style="${Object.entries(pStyle).map(([key, value]) => `${key}:${value}`).join(';')}">${element.content}</${element.type}>`).join('')}
</div>
<footer style="${Object.entries(footerStyle).map(([key, value]) => `${key}:${value}`).join(';')}">Generated by Koishi ${version} / koishi-plugin-imagify v${pv}</footer>
</body>
</html>`)
      session.elements = [...h.parse(image), ...session.elements.filter(e => appendElements.includes(e.type))]
    }
  }, true)
}

function paser(elements: h[]) {
  const result = []
  for (const element of elements) {
    let obj = {
      type: element.type,
      attrs: Object.entries(element.attrs).map(([key, value]) => `${key}="${value}"`),
      element: <element.type {...element.attrs}>{paser(element.children)}</element.type>
    }
    if (renderElements.includes(element.type)) obj['content'] = paser(element.children)
    else if (specialElements.includes(element.type)) switch (element.type) {
      case 'image':
        obj['type'] = 'img'
        obj['attrs'] = [`src="${element.attrs['url']}"`]
        break
      case 'text':
        const content = element.attrs['content'].replace(/ /g, '&nbsp;')
        if (content.includes('\n')) {
          obj['type'] = 'p'
          obj['attrs'] = []
          obj['content'] = content.split('\n').map(line => `<span>${line}</span><br>`).join('')
        } else
          obj['content'] = content
        break
    } else continue
    result.push(obj)
  }
  console.log(result)
  return result
}
